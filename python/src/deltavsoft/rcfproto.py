# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import google.protobuf
import google.protobuf.service

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rcfproto', [dirname(__file__)])
        except ImportError:
            import _rcfproto
            return _rcfproto
        if fp is not None:
            try:
                _mod = imp.load_module('_rcfproto', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    #_rcfproto = swig_import_helper()
    import util
    _rcfproto = util.LoadRCFProtoNativeDll()
    
    del swig_import_helper
else:
    import _rcfproto
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rcfproto.delete_SwigPyIterator
    __del__ = lambda self : None;
    def Value(self): return _rcfproto.SwigPyIterator_value(self)
    def Incr(self, n = 1): return _rcfproto.SwigPyIterator_incr(self, n)
    def Decr(self, n = 1): return _rcfproto.SwigPyIterator_decr(self, n)
    def Distance(self, *args): return _rcfproto.SwigPyIterator_distance(self, *args)
    def Equal(self, *args): return _rcfproto.SwigPyIterator_equal(self, *args)
    def Copy(self): return _rcfproto.SwigPyIterator_copy(self)
    def Next(self): return _rcfproto.SwigPyIterator_next(self)
    def __next__(self): return _rcfproto.SwigPyIterator___next__(self)
    def Previous(self): return _rcfproto.SwigPyIterator_previous(self)
    def Advance(self, *args): return _rcfproto.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _rcfproto.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _rcfproto.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _rcfproto.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _rcfproto.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _rcfproto.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _rcfproto.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
_SwigPyIterator_swigregister = _rcfproto.SwigPyIterator_swigregister
_SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _rcfproto.SHARED_PTR_DISOWN
class TransportProtocolList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransportProtocolList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransportProtocolList, name)
    __repr__ = _swig_repr
    def Iterator(self): return _rcfproto.TransportProtocolList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _rcfproto.TransportProtocolList___nonzero__(self)
    def __bool__(self): return _rcfproto.TransportProtocolList___bool__(self)
    def __len__(self): return _rcfproto.TransportProtocolList___len__(self)
    def Pop(self): return _rcfproto.TransportProtocolList_pop(self)
    def __getslice__(self, *args): return _rcfproto.TransportProtocolList___getslice__(self, *args)
    def __setslice__(self, *args): return _rcfproto.TransportProtocolList___setslice__(self, *args)
    def __delslice__(self, *args): return _rcfproto.TransportProtocolList___delslice__(self, *args)
    def __delitem__(self, *args): return _rcfproto.TransportProtocolList___delitem__(self, *args)
    def __getitem__(self, *args): return _rcfproto.TransportProtocolList___getitem__(self, *args)
    def __setitem__(self, *args): return _rcfproto.TransportProtocolList___setitem__(self, *args)
    def Append(self, *args): return _rcfproto.TransportProtocolList_append(self, *args)
    def Empty(self): return _rcfproto.TransportProtocolList_empty(self)
    def Size(self): return _rcfproto.TransportProtocolList_size(self)
    def Clear(self): return _rcfproto.TransportProtocolList_clear(self)
    def Swap(self, *args): return _rcfproto.TransportProtocolList_swap(self, *args)
    def Get_allocator(self): return _rcfproto.TransportProtocolList_get_allocator(self)
    def Begin(self): return _rcfproto.TransportProtocolList_begin(self)
    def End(self): return _rcfproto.TransportProtocolList_end(self)
    def Rbegin(self): return _rcfproto.TransportProtocolList_rbegin(self)
    def Rend(self): return _rcfproto.TransportProtocolList_rend(self)
    def Pop_back(self): return _rcfproto.TransportProtocolList_pop_back(self)
    def Erase(self, *args): return _rcfproto.TransportProtocolList_erase(self, *args)
    def __init__(self, *args): 
        this = _rcfproto.new_TransportProtocolList(*args)
        try: self.this.append(this)
        except: self.this = this
    def Push_back(self, *args): return _rcfproto.TransportProtocolList_push_back(self, *args)
    def Front(self): return _rcfproto.TransportProtocolList_front(self)
    def Back(self): return _rcfproto.TransportProtocolList_back(self)
    def Assign(self, *args): return _rcfproto.TransportProtocolList_assign(self, *args)
    def Resize(self, *args): return _rcfproto.TransportProtocolList_resize(self, *args)
    def Insert(self, *args): return _rcfproto.TransportProtocolList_insert(self, *args)
    def Reserve(self, *args): return _rcfproto.TransportProtocolList_reserve(self, *args)
    def Capacity(self): return _rcfproto.TransportProtocolList_capacity(self)
    __swig_destroy__ = _rcfproto.delete_TransportProtocolList
    __del__ = lambda self : None;
_TransportProtocolList_swigregister = _rcfproto.TransportProtocolList_swigregister
_TransportProtocolList_swigregister(TransportProtocolList)



def Init():
  """Reference-counted initialization of RCF framework. May be called multiple times (see deinit()). """
  
  return _rcfproto.init()
init = _rcfproto.init


def Deinit():
  """Reference-counted deinitialization of RCF framework. For actual deinitialization to take place, deinit() must be called as many times as init() has been called. """
  
  return _rcfproto.deinit()
deinit = _rcfproto.deinit


def IsProBuild():
  """ """
  
  return _rcfproto.isProBuild()
isProBuild = _rcfproto.isProBuild
class LogTarget(_object):
    """Base class for log targets. Log targets are passed to the enableLogging() function, to configure RCF logging. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogTarget, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rcfproto.delete_LogTarget
    __del__ = lambda self : None;
_LogTarget_swigregister = _rcfproto.LogTarget_swigregister
_LogTarget_swigregister(LogTarget)

class LogToStdout(LogTarget):
    """Configures log output to be directed to standard output. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [LogTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogToStdout, name, value)
    __swig_getmethods__ = {}
    for _s in [LogTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogToStdout, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _rcfproto.new_LogToStdout()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete_LogToStdout
    __del__ = lambda self : None;
_LogToStdout_swigregister = _rcfproto.LogToStdout_swigregister
_LogToStdout_swigregister(LogToStdout)

class LogToDebugWindow(LogTarget):
    """Configures log output to be directed to Windows debug output. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [LogTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogToDebugWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [LogTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogToDebugWindow, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _rcfproto.new_LogToDebugWindow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete_LogToDebugWindow
    __del__ = lambda self : None;
_LogToDebugWindow_swigregister = _rcfproto.LogToDebugWindow_swigregister
_LogToDebugWindow_swigregister(LogToDebugWindow)

class LogToEventLog(LogTarget):
    """Configures log output to be directed to the Windows event log. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [LogTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogToEventLog, name, value)
    __swig_getmethods__ = {}
    for _s in [LogTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogToEventLog, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rcfproto.new_LogToEventLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete_LogToEventLog
    __del__ = lambda self : None;
_LogToEventLog_swigregister = _rcfproto.LogToEventLog_swigregister
_LogToEventLog_swigregister(LogToEventLog)

class LogToFile(LogTarget):
    """Configures log output to be directed to a log file. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [LogTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogToFile, name, value)
    __swig_getmethods__ = {}
    for _s in [LogTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogToFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rcfproto.new_LogToFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete_LogToFile
    __del__ = lambda self : None;
_LogToFile_swigregister = _rcfproto.LogToFile_swigregister
_LogToFile_swigregister(LogToFile)



def EnableLogging(*args):
  """Configures logging for the RCF runtime. logTarget is where the log output will appear. loglevel is the detail level of the log, ranging from 0 (no logging), 1 (errors-only logging) to 4 (maximum detail logging). logFormat is an optional parameter describing the format of the log output. """
  
  return _rcfproto.enableLogging(*args)
enableLogging = _rcfproto.enableLogging


def DisableLogging():
  """Disables logging for the RCF runtime. """
  
  return _rcfproto.disableLogging()
disableLogging = _rcfproto.disableLogging
Tp_Unspecified = _rcfproto.Tp_Unspecified
Tp_Clear = _rcfproto.Tp_Clear
Tp_Ntlm = _rcfproto.Tp_Ntlm
Tp_Kerberos = _rcfproto.Tp_Kerberos
Tp_Negotiate = _rcfproto.Tp_Negotiate
Tp_Ssl = _rcfproto.Tp_Ssl
Tt_Unknown = _rcfproto.Tt_Unknown
Tt_Tcp = _rcfproto.Tt_Tcp
Tt_Udp = _rcfproto.Tt_Udp
Tt_Win32NamedPipe = _rcfproto.Tt_Win32NamedPipe
Tt_UnixNamedPipe = _rcfproto.Tt_UnixNamedPipe
Tt_Http = _rcfproto.Tt_Http
Tt_Https = _rcfproto.Tt_Https
Si_Schannel = _rcfproto.Si_Schannel
Si_OpenSsl = _rcfproto.Si_OpenSsl
Cl_CurrentUser = _rcfproto.Cl_CurrentUser
Cl_LocalMachine = _rcfproto.Cl_LocalMachine
Cs_AddressBook = _rcfproto.Cs_AddressBook
Cs_AuthRoot = _rcfproto.Cs_AuthRoot
Cs_CertificateAuthority = _rcfproto.Cs_CertificateAuthority
Cs_Disallowed = _rcfproto.Cs_Disallowed
Cs_My = _rcfproto.Cs_My
Cs_Root = _rcfproto.Cs_Root
Cs_TrustedPeople = _rcfproto.Cs_TrustedPeople
Cs_TrustedPublisher = _rcfproto.Cs_TrustedPublisher
Cit_Unspecified = _rcfproto.Cit_Unspecified
Cit_Win32 = _rcfproto.Cit_Win32
Cit_X509 = _rcfproto.Cit_X509
class Certificate(_object):
    """Base class of all certificate classes. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Certificate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Certificate, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def _getType(self): return _rcfproto.Certificate__getType(self)
    def _downcastToWin32Certificate(self, *args): return _rcfproto.Certificate__downcastToWin32Certificate(self, *args)
    def _downcastToX509Certificate(self, *args): return _rcfproto.Certificate__downcastToX509Certificate(self, *args)
    __swig_destroy__ = _rcfproto.delete_Certificate
    __del__ = lambda self : None;
_Certificate_swigregister = _rcfproto.Certificate_swigregister
_Certificate_swigregister(Certificate)

class PemCertificate(Certificate):
    """Use this class to load a certificate in .pem format. Only applicable to OpenSSL. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [Certificate]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PemCertificate, name, value)
    __swig_getmethods__ = {}
    for _s in [Certificate]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PemCertificate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """Loads a .pem certificate, using the given file path and password. """
        
        this = _rcfproto.new_PemCertificate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete_PemCertificate
    __del__ = lambda self : None;
_PemCertificate_swigregister = _rcfproto.PemCertificate_swigregister
_PemCertificate_swigregister(PemCertificate)

class X509Certificate(Certificate):
    """Represents an in-memory certificate, usually from a remote peer. Only applicable to OpenSSL. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [Certificate]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, X509Certificate, name, value)
    __swig_getmethods__ = {}
    for _s in [Certificate]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, X509Certificate, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def _getType(self): return _rcfproto.X509Certificate__getType(self)

    def GetCertificateName(self):
        """Gets the name of the certificate. """
        return _rcfproto.X509Certificate_getCertificateName(self)

    def GetIssuerName(self):
        """Gets the name of the issuer of the certificate. """
        return _rcfproto.X509Certificate_getIssuerName(self)
    __swig_destroy__ = _rcfproto.delete_X509Certificate
    __del__ = lambda self : None;
_X509Certificate_swigregister = _rcfproto.X509Certificate_swigregister
_X509Certificate_swigregister(X509Certificate)

class Win32Certificate(Certificate):
    """Represents an in-memory certificate, usually from a remote peer. Only applicable to Schannel. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [Certificate]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Win32Certificate, name, value)
    __swig_getmethods__ = {}
    for _s in [Certificate]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Win32Certificate, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def _getType(self): return _rcfproto.Win32Certificate__getType(self)

    def GetCertificateName(self):
        """Gets the name of the certificate. """
        return _rcfproto.Win32Certificate_getCertificateName(self)

    def GetIssuerName(self):
        """Gets the name of the issuer of the certificate. """
        return _rcfproto.Win32Certificate_getIssuerName(self)

    def ExportToPfx(self, *args):
        """Exports the certificate in PFX format, to the given file path. """
        return _rcfproto.Win32Certificate_exportToPfx(self, *args)

    def FindRootCertificate(self, *args):
        """Attempts to locate a root certificate for this certificate, in the given certificate store. Returns the root certificate if found, and otherwise null. """
        return _rcfproto.Win32Certificate_findRootCertificate(self, *args)
    __swig_destroy__ = _rcfproto.delete_Win32Certificate
    __del__ = lambda self : None;
_Win32Certificate_swigregister = _rcfproto.Win32Certificate_swigregister
_Win32Certificate_swigregister(Win32Certificate)

class PfxCertificate(Win32Certificate):
    """Use this class to load a certificate from .pfx format. Only applicable to Schannel. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [Win32Certificate]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PfxCertificate, name, value)
    __swig_getmethods__ = {}
    for _s in [Win32Certificate]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PfxCertificate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """Loads a certificate from a .pfx file, using the given file path, password and certificate name. """
        
        this = _rcfproto.new_PfxCertificate(*args)
        try: self.this.append(this)
        except: self.this = this

    def AddToStore(self, *args):
        """Adds the certificate to the given Windows certificate store. """
        return _rcfproto.PfxCertificate_addToStore(self, *args)
    __swig_destroy__ = _rcfproto.delete_PfxCertificate
    __del__ = lambda self : None;
_PfxCertificate_swigregister = _rcfproto.PfxCertificate_swigregister
_PfxCertificate_swigregister(PfxCertificate)

class StoreCertificate(Win32Certificate):
    """Represents a certificate in a Windows certificate store. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [Win32Certificate]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StoreCertificate, name, value)
    __swig_getmethods__ = {}
    for _s in [Win32Certificate]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StoreCertificate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """Loads a certificate from a certificate store. """
        
        this = _rcfproto.new_StoreCertificate(*args)
        try: self.this.append(this)
        except: self.this = this

    def RemoveFromStore(self):
        """Removes the certificate from the store it was loaded from. """
        return _rcfproto.StoreCertificate_removeFromStore(self)
    __swig_destroy__ = _rcfproto.delete_StoreCertificate
    __del__ = lambda self : None;
_StoreCertificate_swigregister = _rcfproto.StoreCertificate_swigregister
_StoreCertificate_swigregister(StoreCertificate)

class StoreCertificateIterator(_object):
    """Iterates over the certificates in a Windows certificate store. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StoreCertificateIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StoreCertificateIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """Constructs a store iterator for the the given certificate location and store. """
        
        this = _rcfproto.new_StoreCertificateIterator(*args)
        try: self.this.append(this)
        except: self.this = this

    def MoveNext(self):
        """Moves to the next certificate in the store. Returns false if there are no more certificates, and true otherwise. """
        return _rcfproto.StoreCertificateIterator_moveNext(self)

    def Reset(self):
        """Resets the iterator back to the beginning of the store. """
        return _rcfproto.StoreCertificateIterator_reset(self)

    def Current(self):
        """Returns the current certificate. """
        return _rcfproto.StoreCertificateIterator_current(self)
    __swig_destroy__ = _rcfproto.delete_StoreCertificateIterator
    __del__ = lambda self : None;
_StoreCertificateIterator_swigregister = _rcfproto.StoreCertificateIterator_swigregister
_StoreCertificateIterator_swigregister(StoreCertificateIterator)



def SetDefaultSslImplementation(*args):
  """Sets the default SSL implementation to use (OpenSSL or Schannel). The default is OpenSSL. """
  
  return _rcfproto.setDefaultSslImplementation(*args)
setDefaultSslImplementation = _rcfproto.setDefaultSslImplementation


def GetDefaultSslImplementation():
  """Gets the default SSL implementation. """
  
  return _rcfproto.getDefaultSslImplementation()
getDefaultSslImplementation = _rcfproto.getDefaultSslImplementation
class IpAddress(_object):
    """Represents an IP address (IPv4 or IPv6). 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IpAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IpAddress, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """Construct an IP address from a host name """
        
        this = _rcfproto.new_IpAddress(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete_IpAddress
    __del__ = lambda self : None;
_IpAddress_swigregister = _rcfproto.IpAddress_swigregister
_IpAddress_swigregister(IpAddress)

class ThreadPool(_object):
    """Represents a server-side thread pool. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadPool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadPool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rcfproto.new_ThreadPool(*args)
        try: self.this.append(this)
        except: self.this = this

    def SetThreadMinCount(self, *args):
        """Sets the minimum number of threads in the thread pool. """
        return _rcfproto.ThreadPool_setThreadMinCount(self, *args)

    def GetThreadMinCount(self):
        """Returns the minimum number of threads in the thread pool. """
        return _rcfproto.ThreadPool_getThreadMinCount(self)

    def SetThreadMaxCount(self, *args):
        """Sets the maximum number of threads in the thread pool. """
        return _rcfproto.ThreadPool_setThreadMaxCount(self, *args)

    def GetThreadMaxCount(self):
        """Returns the maximum number of threads in the thread pool. """
        return _rcfproto.ThreadPool_getThreadMaxCount(self)

    def SetThreadIdleTimeoutMs(self, *args):
        """Sets the thread idle timeout value, in milliseconds. After a thread has been idle for this time, it will be shut down, unless the thread count is already at the minimum value for the thread pool. """
        return _rcfproto.ThreadPool_setThreadIdleTimeoutMs(self, *args)

    def GetThreadIdleTimeoutMs(self):
        """Returns the thread idle timeout value, in milliseconds. """
        return _rcfproto.ThreadPool_getThreadIdleTimeoutMs(self)

    def SetReserveLastThread(self, *args):
        """If this setting is true, clients will receive an error message right away, if all threads in the thread pool are busy. Otherwise, the client will wait for a thread in the thread pool to become free. """
        return _rcfproto.ThreadPool_setReserveLastThread(self, *args)
    def GetReserveLastThread(self): return _rcfproto.ThreadPool_getReserveLastThread(self)

    def SetThreadName(self, *args):
        """Sets the thread name of the thread pool threads, as visible in a debugger. """
        return _rcfproto.ThreadPool_setThreadName(self, *args)

    def GetThreadName(self):
        """Returns the thread name of the thread pool threads. """
        return _rcfproto.ThreadPool_getThreadName(self)
    __swig_destroy__ = _rcfproto.delete_ThreadPool
    __del__ = lambda self : None;
_ThreadPool_swigregister = _rcfproto.ThreadPool_swigregister
_ThreadPool_swigregister(ThreadPool)

class Endpoint(_object):
    """Base class for all network endpoint types. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Endpoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Endpoint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rcfproto.delete_Endpoint
    __del__ = lambda self : None;
_Endpoint_swigregister = _rcfproto.Endpoint_swigregister
_Endpoint_swigregister(Endpoint)

class TcpEndpoint(Endpoint):
    """Represents a TCP endpoint. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [Endpoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TcpEndpoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Endpoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TcpEndpoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """Constructs a TcpEndpoint from a port number. The IP address defaults to 127.0.0.1 . """
        
        this = _rcfproto.new_TcpEndpoint(*args)
        try: self.this.append(this)
        except: self.this = this

    def GetIp(self):
        """Gets the IP address of the TcpEndpoint. """
        return _rcfproto.TcpEndpoint_getIp(self)

    def GetPort(self):
        """Gets the port number of the TcpEndpoint. """
        return _rcfproto.TcpEndpoint_getPort(self)

    def AsString(self):
        """Returns a string representation of the TcpEndpoint. """
        return _rcfproto.TcpEndpoint_asString(self)
    __swig_destroy__ = _rcfproto.delete_TcpEndpoint
    __del__ = lambda self : None;
_TcpEndpoint_swigregister = _rcfproto.TcpEndpoint_swigregister
_TcpEndpoint_swigregister(TcpEndpoint)

class Win32NamedPipeEndpoint(Endpoint):
    """Represents a Win32 named pipe endpoint. Only available on Windows platforms. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [Endpoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Win32NamedPipeEndpoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Endpoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Win32NamedPipeEndpoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """Constructs a Win32 named pipe endpoint with the given pipe name. """
        
        this = _rcfproto.new_Win32NamedPipeEndpoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete_Win32NamedPipeEndpoint
    __del__ = lambda self : None;
_Win32NamedPipeEndpoint_swigregister = _rcfproto.Win32NamedPipeEndpoint_swigregister
_Win32NamedPipeEndpoint_swigregister(Win32NamedPipeEndpoint)

class UnixLocalEndpoint(Endpoint):
    """Represents a UNIX local socket endpoint. Only available on UNIX platforms. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [Endpoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnixLocalEndpoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Endpoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnixLocalEndpoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """Constructs a UNIX local socket endpoint with the given name. """
        
        this = _rcfproto.new_UnixLocalEndpoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete_UnixLocalEndpoint
    __del__ = lambda self : None;
_UnixLocalEndpoint_swigregister = _rcfproto.UnixLocalEndpoint_swigregister
_UnixLocalEndpoint_swigregister(UnixLocalEndpoint)

class HttpEndpoint(TcpEndpoint):
    """Represents a HTTP endpoint. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [TcpEndpoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HttpEndpoint, name, value)
    __swig_getmethods__ = {}
    for _s in [TcpEndpoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HttpEndpoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """Constructs an HTTP endpoint on the given port number. """
        
        this = _rcfproto.new_HttpEndpoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete_HttpEndpoint
    __del__ = lambda self : None;
_HttpEndpoint_swigregister = _rcfproto.HttpEndpoint_swigregister
_HttpEndpoint_swigregister(HttpEndpoint)

class HttpsEndpoint(TcpEndpoint):
    """Represents a HTTPS endpoint. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    for _s in [TcpEndpoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HttpsEndpoint, name, value)
    __swig_getmethods__ = {}
    for _s in [TcpEndpoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HttpsEndpoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """Constructs an HTTPS endpoint on the given port number. """
        
        this = _rcfproto.new_HttpsEndpoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete_HttpsEndpoint
    __del__ = lambda self : None;
_HttpsEndpoint_swigregister = _rcfproto.HttpsEndpoint_swigregister
_HttpsEndpoint_swigregister(HttpsEndpoint)

class ServerTransport(_object):
    """Base class for all server transports. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerTransport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ServerTransport, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetTransportType(self):
        """Returns the transport type of this server transport. """
        return _rcfproto.ServerTransport_getTransportType(self)

    def SetMaxIncomingMessageLength(self, *args):
        """Sets maximum incoming message length. Incoming messages that are larger than this size will be dropped. """
        return _rcfproto.ServerTransport_setMaxIncomingMessageLength(self, *args)

    def GetMaxIncomingMessageLength(self):
        """Returns maximum incoming message length. """
        return _rcfproto.ServerTransport_getMaxIncomingMessageLength(self)

    def SetConnectionLimit(self, *args):
        """Sets the maximum number of simultaneous connections to the server transport. """
        return _rcfproto.ServerTransport_setConnectionLimit(self, *args)

    def GetConnectionLimit(self):
        """Returns the maximum number of simultaneous connections to the server transport. """
        return _rcfproto.ServerTransport_getConnectionLimit(self)

    def SetInitialNumberOfConnections(self, *args):
        """Sets the initial number of listening connections that are created when the server transport starts. """
        return _rcfproto.ServerTransport_setInitialNumberOfConnections(self, *args)

    def GetInitialNumberOfConnections(self):
        """Returns the initial number of listening connections that are created when the server transport starts. """
        return _rcfproto.ServerTransport_getInitialNumberOfConnections(self)

    def SetThreadPool(self, *args):
        """Sets the thread pool that the server transport will use. """
        return _rcfproto.ServerTransport_setThreadPool(self, *args)

    def SetSupportedProtocols(self, *args):
        """Sets the list of supported protocols the server transport supports. Clients that connect without using one of the supported protocols are dropped. If the list of supported protocols is empty, all protocols are allowed. """
        return _rcfproto.ServerTransport_setSupportedProtocols(self, *args)
    def GetSupportedProtocols(self): return _rcfproto.ServerTransport_getSupportedProtocols(self)
    __swig_destroy__ = _rcfproto.delete_ServerTransport
    __del__ = lambda self : None;
_ServerTransport_swigregister = _rcfproto.ServerTransport_swigregister
_ServerTransport_swigregister(ServerTransport)

class ClientTransport(_object):
    """Base class for all client transports. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientTransport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClientTransport, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetTransportType(self):
        """Returns the transport type of this client transport. """
        return _rcfproto.ClientTransport_getTransportType(self)

    def SetMaxIncomingMessageLength(self, *args):
        """Sets maximum incoming message length. Incoming messages that are larger than this size will be dropped. """
        return _rcfproto.ClientTransport_setMaxIncomingMessageLength(self, *args)

    def GetMaxIncomingMessageLength(self):
        """Returns maximum incoming message length. """
        return _rcfproto.ClientTransport_getMaxIncomingMessageLength(self)

    def GetLastRequestSize(self):
        """Returns the byte size of the last request sent on the client transport. """
        return _rcfproto.ClientTransport_getLastRequestSize(self)

    def GetLastResponseSize(self):
        """Returns the byte size of the last response received on the client transport. """
        return _rcfproto.ClientTransport_getLastResponseSize(self)

    def GetRunningTotalBytesSent(self):
        """Returns the running total of bytes sent on the client transport. """
        return _rcfproto.ClientTransport_getRunningTotalBytesSent(self)

    def GetRunningTotalBytesReceived(self):
        """Returns the running total of bytes received on the client transport. """
        return _rcfproto.ClientTransport_getRunningTotalBytesReceived(self)

    def ResetRunningTotals(self):
        """Resets the bytes-sent and bytes-received running totals to zero. """
        return _rcfproto.ClientTransport_resetRunningTotals(self)
    __swig_destroy__ = _rcfproto.delete_ClientTransport
    __del__ = lambda self : None;
_ClientTransport_swigregister = _rcfproto.ClientTransport_swigregister
_ClientTransport_swigregister(ClientTransport)

class _SwigCallbackArgs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _SwigCallbackArgs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _SwigCallbackArgs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mErrorString"] = _rcfproto._SwigCallbackArgs_mErrorString_set
    __swig_getmethods__["mErrorString"] = _rcfproto._SwigCallbackArgs_mErrorString_get
    if _newclass:mErrorString = _swig_property(_rcfproto._SwigCallbackArgs_mErrorString_get, _rcfproto._SwigCallbackArgs_mErrorString_set)
    __swig_setmethods__["mCertificatePtr"] = _rcfproto._SwigCallbackArgs_mCertificatePtr_set
    __swig_getmethods__["mCertificatePtr"] = _rcfproto._SwigCallbackArgs_mCertificatePtr_get
    if _newclass:mCertificatePtr = _swig_property(_rcfproto._SwigCallbackArgs_mCertificatePtr_get, _rcfproto._SwigCallbackArgs_mCertificatePtr_set)
    def __init__(self): 
        this = _rcfproto.new__SwigCallbackArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete__SwigCallbackArgs
    __del__ = lambda self : None;
__SwigCallbackArgs_swigregister = _rcfproto._SwigCallbackArgs_swigregister
__SwigCallbackArgs_swigregister(_SwigCallbackArgs)

class _SwigCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _SwigCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _SwigCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == _SwigCallback:
            _self = None
        else:
            _self = self
        this = _rcfproto.new__SwigCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete__SwigCallback
    __del__ = lambda self : None;
    def Run(self): return _rcfproto._SwigCallback_Run(self)
    def ProtoRpcBegin(self, *args): return _rcfproto._SwigCallback_ProtoRpcBegin(self, *args)
    def ValidateCertificate(self, *args): return _rcfproto._SwigCallback_ValidateCertificate(self, *args)
    def __disown__(self):
        self.this.disown()
        _rcfproto.disown__SwigCallback(self)
        return weakref_proxy(self)
__SwigCallback_swigregister = _rcfproto._SwigCallback_swigregister
__SwigCallback_swigregister(_SwigCallback)

class RcfProtoChannel(google.protobuf.service.RpcChannel):
    """Represents a single RPC connection to a server. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RcfProtoChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RcfProtoChannel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """Constructs a RPC channel from an endpoint. """
        
        this = _rcfproto.new_RcfProtoChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def _CallMethodSwig_WithCopy(self, *args): return _rcfproto.RcfProtoChannel__CallMethodSwig_WithCopy(self, *args)
    def _GetResponseBuffer_WithCopy(self): return _rcfproto.RcfProtoChannel__GetResponseBuffer_WithCopy(self)

    def Failed(self):
        """After a call has finished, returns true if the call failed.  The possible reasons for failure depend on the RPC implementation.  Failed() must not be called before a call has finished.  If Failed() returns true, the contents of the response message are undefined. """
        return _rcfproto.RcfProtoChannel_Failed(self)

    def ErrorText(self):
        """If Failed() is true, returns a human-readable description of the error. """
        return _rcfproto.RcfProtoChannel_ErrorText(self)

    def StartCancel(self):
        """Advises the RPC system that the caller desires that the RPC call be canceled.  The RPC system may cancel it immediately, may wait awhile and then cancel it, or may not even cancel the call at all.  If the call is canceled, the "done" callback will still be called and the RpcController will indicate that the call failed at that time. """
        return _rcfproto.RcfProtoChannel_StartCancel(self)
    def Completed(self): return _rcfproto.RcfProtoChannel_Completed(self)

    def Connect(self):
        """Connects to the server. """
        return _rcfproto.RcfProtoChannel_connect(self)

    def Disconnect(self):
        """Disconencts from the server. """
        return _rcfproto.RcfProtoChannel_disconnect(self)

    def SetRemoteCallTimeoutMs(self, *args):
        """Sets the remote call timeout value, in milliseconds. """
        return _rcfproto.RcfProtoChannel_setRemoteCallTimeoutMs(self, *args)

    def GetRemoteCallTimeoutMs(self):
        """Gets the remote call timeout value, in milliseconds. """
        return _rcfproto.RcfProtoChannel_getRemoteCallTimeoutMs(self)

    def SetConnectTimeoutMs(self, *args):
        """Sets the connect timeout value, in milliseconds. """
        return _rcfproto.RcfProtoChannel_setConnectTimeoutMs(self, *args)

    def GetConnectTimeoutMs(self):
        """Gets the connect timeout value, in milliseconds. """
        return _rcfproto.RcfProtoChannel_getConnectTimeoutMs(self)

    def SetTransportProtocol(self, *args):
        """Sets the transport protocol being used by the channel. """
        return _rcfproto.RcfProtoChannel_setTransportProtocol(self, *args)

    def GetTransportProtocol(self):
        """Gets the transport protocol being used by the channel. """
        return _rcfproto.RcfProtoChannel_getTransportProtocol(self)

    def SetAsynchronousRpcMode(self, *args):
        """Sets the asynchronous RPC mode. By default the asynchronous RPC mode is false. """
        return _rcfproto.RcfProtoChannel_setAsynchronousRpcMode(self, *args)

    def GetAsynchronousRpcMode(self):
        """Gets the asynchronous RPC mode. """
        return _rcfproto.RcfProtoChannel_getAsynchronousRpcMode(self)

    def SetPingBackIntervalMs(self, *args):
        """Sets the ping back interval of the connection, in milliseconds. Ping backs are sent from the server back to the client, while a remote call is in progress. """
        return _rcfproto.RcfProtoChannel_setPingBackIntervalMs(self, *args)

    def GetPingBackIntervalMs(self):
        """Returns the ping back interval of the connection. """
        return _rcfproto.RcfProtoChannel_getPingBackIntervalMs(self)

    def SetHttpProxy(self, *args):
        """Sets the network address of the HTTP proxy server, through which to route remote calls. Only valid when using a HTTP or HTTPS endpoint. """
        return _rcfproto.RcfProtoChannel_setHttpProxy(self, *args)

    def GetHttpProxy(self):
        """Returns the network address of the HTTP proxy server. """
        return _rcfproto.RcfProtoChannel_getHttpProxy(self)

    def SetHttpProxyPort(self, *args):
        """Sets the port number of the HTTP proxy server, through which to route remote calls. Only valid when using a HTTP or HTTPS endpoint. """
        return _rcfproto.RcfProtoChannel_setHttpProxyPort(self, *args)

    def GetHttpProxyPort(self):
        """Returns the port number of the HTTP proxy server. """
        return _rcfproto.RcfProtoChannel_getHttpProxyPort(self)

    def GetTransportType(self):
        """Returns the transport type of the connection. """
        return _rcfproto.RcfProtoChannel_getTransportType(self)

    def SetUsername(self, *args):
        """Sets the Windows username to use when connecting. Only valid for NTLM and Kerberos transport protocols. """
        return _rcfproto.RcfProtoChannel_setUsername(self, *args)

    def GetUsername(self):
        """Returns the Windows username to use when connecting. """
        return _rcfproto.RcfProtoChannel_getUsername(self)

    def SetPassword(self, *args):
        """Sets the Windows password to use when connecting. Only valid for NTLM and Kerberos transport protocols. """
        return _rcfproto.RcfProtoChannel_setPassword(self, *args)

    def GetPassword(self):
        """Returns the Windows password to use when connecting. """
        return _rcfproto.RcfProtoChannel_getPassword(self)

    def SetKerberosSpn(self, *args):
        """Sets the Kerberos SPN to use when connecting. Only valid for Kerberos transport protocols. """
        return _rcfproto.RcfProtoChannel_setKerberosSpn(self, *args)

    def GetKerberosSpn(self):
        """Returns the Kerberos SPN to use when connecting. """
        return _rcfproto.RcfProtoChannel_getKerberosSpn(self)

    def SetEnableCompression(self, *args):
        """Sets the transport level compression setting for this connection. """
        return _rcfproto.RcfProtoChannel_setEnableCompression(self, *args)

    def GetEnableCompression(self):
        """Returns the transport level compression setting for this connection. """
        return _rcfproto.RcfProtoChannel_getEnableCompression(self)

    def SetCertificate(self, *args):
        """Sets the SSL certificate for the channel. """
        return _rcfproto.RcfProtoChannel_setCertificate(self, *args)

    def GetCertificate(self):
        """Gets the SSL certificate for the channel. """
        return _rcfproto.RcfProtoChannel_getCertificate(self)

    def SetCaCertificate(self, *args):
        """Sets the certificate authority for the channel. """
        return _rcfproto.RcfProtoChannel_setCaCertificate(self, *args)

    def GetCaCertificate(self):
        """Gets the certificate authority for the channel. """
        return _rcfproto.RcfProtoChannel_getCaCertificate(self)

    def SetOpenSslCipherSuite(self, *args):
        """Sets the OpenSSL cipher suite. Only applicable when using OpenSSL as the SSL implementation. """
        return _rcfproto.RcfProtoChannel_setOpenSslCipherSuite(self, *args)

    def GetOpenSslCipherSuite(self):
        """Gets the OpenSSL cipher suite. """
        return _rcfproto.RcfProtoChannel_getOpenSslCipherSuite(self)

    def SetEnableSchannelCertificateValidation(self, *args):
        """Sets the Schannel certificate validation setting. Only applicable when using Schannel as the SSL implementation. If this setting is non-empty, it will be used by Schannel to automatically validate peer certificates. """
        return _rcfproto.RcfProtoChannel_setEnableSchannelCertificateValidation(self, *args)

    def GetEnableSchannelCertificateValidation(self):
        """Gets the Schannel certificate validation setting. """
        return _rcfproto.RcfProtoChannel_getEnableSchannelCertificateValidation(self)
    def _setCertificateValidationCallback(self, *args): return _rcfproto.RcfProtoChannel__setCertificateValidationCallback(self, *args)

    def SetSslImplementation(self, *args):
        """Sets the SSL implementation to be used by the channel. """
        return _rcfproto.RcfProtoChannel_setSslImplementation(self, *args)

    def GetSslImplementation(self):
        """Gets the SSL implementation. """
        return _rcfproto.RcfProtoChannel_getSslImplementation(self)
    __swig_destroy__ = _rcfproto.delete_RcfProtoChannel
    __del__ = lambda self : None;

    # BEGIN INSERTED CODE


    def CallMethod(self, methodDesc, controller, request, responsePrototype, done):
        """Gets the certificate validation callback. """
        
        rcfprotoimpl.RcfProtoChannelImpl.CallMethod(self, methodDesc, controller, request, responsePrototype, done)

    def GetResponse(self):
        return rcfprotoimpl.RcfProtoChannelImpl.GetResponse(self);

    def SetCertificateValidationCallback(self, certValidationCallback):
        rcfprotoimpl.RcfProtoChannelImpl.SetCertificateValidationCallback(self, certValidationCallback);

    # END INSERTED CODE


_RcfProtoChannel_swigregister = _rcfproto.RcfProtoChannel_swigregister
_RcfProtoChannel_swigregister(RcfProtoChannel)

class RcfProtoSession(_object):
    """Represents the server-side session associated with a RPC connection. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RcfProtoSession, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RcfProtoSession, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetFailed(self, *args):
        """Causes Failed() to return true on the client side.  "reason" will be incorporated into the message returned by ErrorText().  If you find you need to return machine-readable information about failures, you should incorporate it into your response protocol buffer and should NOT call SetFailed(). """
        return _rcfproto.RcfProtoSession_SetFailed(self, *args)

    def IsCanceled(self):
        """If true, indicates that the client canceled the RPC, so the server may as well give up on replying to it.  The server should still call the final "done" callback. """
        return _rcfproto.RcfProtoSession_IsCanceled(self)
    def _Commit(self, *args): return _rcfproto.RcfProtoSession__Commit(self, *args)
    def _GetRequestBuffer_WithCopy(self): return _rcfproto.RcfProtoSession__GetRequestBuffer_WithCopy(self)
    def _SetResponseBuffer_WithCopy(self, *args): return _rcfproto.RcfProtoSession__SetResponseBuffer_WithCopy(self, *args)

    def GetClientUsername(self):
        """Returns the Windows username of the client, if a NTLM or Kerberos transport protocol is being used. """
        return _rcfproto.RcfProtoSession_getClientUsername(self)

    def GetTransportProtocol(self):
        """Returns the transport protocol in use on this server session. """
        return _rcfproto.RcfProtoSession_getTransportProtocol(self)

    def GetTransportType(self):
        """Returns the transport type of this server session. """
        return _rcfproto.RcfProtoSession_getTransportType(self)

    def GetEnableCompression(self):
        """Returns true if compression is enabled for this server session, and false otherwise. Compression is enabled by the client. """
        return _rcfproto.RcfProtoSession_getEnableCompression(self)

    def GetConnectionDuration(self):
        """Returns the duration of the client connection, in milliseconds. """
        return _rcfproto.RcfProtoSession_getConnectionDuration(self)

    def GetRemoteCallCount(self):
        """Returns the number of remote calls executed on the server session so far. """
        return _rcfproto.RcfProtoSession_getRemoteCallCount(self)

    def GetTotalBytesReceived(self):
        """Returns the total number of bytes received by the server session so far. """
        return _rcfproto.RcfProtoSession_getTotalBytesReceived(self)

    def GetTotalBytesSent(self):
        """Returns the total number of bytes sent from the server session so far. """
        return _rcfproto.RcfProtoSession_getTotalBytesSent(self)
    __swig_destroy__ = _rcfproto.delete_RcfProtoSession
    __del__ = lambda self : None;
_RcfProtoSession_swigregister = _rcfproto.RcfProtoSession_swigregister
_RcfProtoSession_swigregister(RcfProtoSession)

class RcfProtoServer(_object):
    """Serves up Protocol Buffer-based services to clients, over one or more server transports. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RcfProtoServer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RcfProtoServer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rcfproto.new_RcfProtoServer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rcfproto.delete_RcfProtoServer
    __del__ = lambda self : None;

    def Start(self):
        """Starts the RCFProto server. """
        
        self.callbackTable = rcfprotoimpl.SwigCallback_ServerRpc(self)
        return _rcfproto.RcfProtoServer_start(self)
        

    def Stop(self):
        """Stops the RCFProto server. """
        return _rcfproto.RcfProtoServer_stop(self)
    def _setCallbackTable(self, *args): return _rcfproto.RcfProtoServer__setCallbackTable(self, *args)

    def SetThreadPool(self, *args):
        """Sets the thread pool the server will use. Thread pools can also be assigned to individual transports. """
        return _rcfproto.RcfProtoServer_setThreadPool(self, *args)

    def GetThreadPool(self):
        """Returns the thread pool the server is using. """
        return _rcfproto.RcfProtoServer_getThreadPool(self)

    def AddEndpoint(self, *args):
        """Adds a transport endpoint to the server. """
        return _rcfproto.RcfProtoServer_addEndpoint(self, *args)

    def SetSupportedTransportProtocols(self, *args):
        """Sets the list of supported protocols the server supports. Clients that connect without using one of the supported protocols are dropped. If the list of supported protocols is empty, all protocols are allowed. Note that supported protocols can also be specified on a server transport, in which case the server transport setting overrides the server setting. """
        return _rcfproto.RcfProtoServer_setSupportedTransportProtocols(self, *args)

    def GetSupportedTransportProtocols(self):
        """Returns the list of supported protocols for the server. """
        return _rcfproto.RcfProtoServer_getSupportedTransportProtocols(self)

    def SetSessionTimeoutMs(self, *args):
        """Sets the session timeout value, in milliseconds. Client connections that are idle for this amount of time will be dropped by the server. """
        return _rcfproto.RcfProtoServer_setSessionTimeoutMs(self, *args)

    def GetSessionTimeoutMs(self):
        """Returns the session timeout value, in milliseconds. """
        return _rcfproto.RcfProtoServer_getSessionTimeoutMs(self)

    def SetSessionHarvestingIntervalMs(self, *args):
        """Sets the session harvesting interval, in milliseconds. This setting determines how often the server will scan for idle client connections. """
        return _rcfproto.RcfProtoServer_setSessionHarvestingIntervalMs(self, *args)

    def GetSessionHarvestingIntervalMs(self):
        """Returns the session harvesting interval, in milliseconds. """
        return _rcfproto.RcfProtoServer_getSessionHarvestingIntervalMs(self)

    def SetCertificate(self, *args):
        """Sets the SSL certificate of the server. """
        return _rcfproto.RcfProtoServer_setCertificate(self, *args)

    def GetCertificate(self):
        """Gets the SSL certificate of the server. """
        return _rcfproto.RcfProtoServer_getCertificate(self)

    def SetOpenSslCipherSuite(self, *args):
        """Sets the OpenSSL cipher suite. Only applicable when OpenSSL is used as the SSL implementation. """
        return _rcfproto.RcfProtoServer_setOpenSslCipherSuite(self, *args)

    def GetOpenSslCipherSuite(self):
        """Gets the OpenSSL cipher suite. """
        return _rcfproto.RcfProtoServer_getOpenSslCipherSuite(self)

    def SetCaCertificate(self, *args):
        """Sets the SSL certificate authority of the server. """
        return _rcfproto.RcfProtoServer_setCaCertificate(self, *args)

    def GetCaCertificate(self):
        """Gets the SSL certificate authority of the server. """
        return _rcfproto.RcfProtoServer_getCaCertificate(self)

    def SetEnableSchannelCertificateValidation(self, *args):
        """Sets the Schannel certificate validation setting. Only applicable when using Schannel as the SSL implementation. If this setting is non-empty, it will be used by Schannel to automatically validate peer certificates. """
        return _rcfproto.RcfProtoServer_setEnableSchannelCertificateValidation(self, *args)

    def GetEnableSchannelCertificateValidation(self):
        """Gets the Schannel certificate validation setting. """
        return _rcfproto.RcfProtoServer_getEnableSchannelCertificateValidation(self)
    def SetSslImplementation(self, *args): return _rcfproto.RcfProtoServer_setSslImplementation(self, *args)

    def GetSslImplementation(self):
        """Gets the SSL implementation of the server. """
        return _rcfproto.RcfProtoServer_getSslImplementation(self)
    # BEGIN INSERTED CODE
    def BindService(self, svc):
        rcfprotoimpl.RcfProtoServerImpl.BindService(self, svc)


    # END INSERTED CODE

_RcfProtoServer_swigregister = _rcfproto.RcfProtoServer_swigregister
_RcfProtoServer_swigregister(RcfProtoServer)

# This file is compatible with both classic and new-style classes.


class RcfProtoController(google.protobuf.service.RpcController) :
    """RPC controller interface, for both server-side and client-side code. 
    
    @undocumented: __swig_setmethods__, __setattr__, __swig_getmethods__, __getattr__, __repr__, __swig_destroy__, __del__"""


    def __init__(self, channel = None, session = None):
        if channel:
            self.channel = channel
            self.session = None
        elif session:
            self.channel = None
            self.session = session


    def Reset(self):
        """Resets the RcfProtoController to its initial state so that it may be reused in a new call.  Must not be called while an RPC is in progress. """
        
        self.channel = None
        self.session = None


    def Failed(self):
        """Client-side: After a call has finished, returns true if the call failed. Failed() must not be called before a call has finished.  If Failed() returns true, the contents of the response message are undefined. """
        
        return self.channel.Failed()



    def ErrorText(self):
        """Client-side: If Failed() is true, returns a human-readable description of the error. """
        
        return self.channel.ErrorText()


    def StartCancel(self):
        """Client-side: Cancels an RPC that is in progress. Once canceled, the "done" callback will still be called and the RcfProtoController will indicate that the call failed at that time. """
        
        self.channel.StartCancel()


    def Completed(self):
        """Client-side: Returns false while a call is in progress, and true after the call has been completed and the completion handler run (if a completion handler was provided). """
        
        return self.channel.Completed()

      # Server-side methods below


    def SetFailed(self, reason):
        """Server-side: Causes Failed() to return true on the client-side.  "reason" will be incorporated into the message returned by ErrorText().  If you find you need to return machine-readable information about failures, you should incorporate it into your response protocol buffer and should NOT call SetFailed(). """
        
        self.session.SetFailed(reason)


    def IsCanceled(self):
        """Server-side: If true, indicates that the client canceled the RPC, so the server may as well give up on replying to it.  The server should still call the final "done" callback. """
        
        self.session.IsCanceled()


    def NotifyOnCancel(self, callback):
        """Asks that the given callback be called when the RPC is canceled.  The callback will always be called exactly once.  If the RPC completes without being canceled, the callback will be called after completion.  If the RPC has already been canceled when NotifyOnCancel() is called, the callback will be called immediately. NotifyOnCancel() must be called no more than once per request. """
        
        self.session.NotifyOnCancel(callback)

    def GetSession(self):
        return self.session

    def GetChannel(self):
        return self.channel


import rcfprotoimpl
from rcfprotoimpl import *


