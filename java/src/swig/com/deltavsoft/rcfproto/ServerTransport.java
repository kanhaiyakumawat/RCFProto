/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.deltavsoft.rcfproto;

/**
 * Base class for all server transports. 
 */
public class ServerTransport {
  private long swigCPtr;
  boolean swigCMemOwn;

  ServerTransport(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  static long getCPtr(ServerTransport obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RCFProtoJNI.delete_ServerTransport(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * Returns the transport type of this server transport. 
   */
  public TransportType getTransportType() {
    return TransportType.swigToEnum(RCFProtoJNI.ServerTransport_getTransportType(swigCPtr, this));
  }

  /**
   * Sets maximum incoming message length. Incoming messages that are larger than this size will be dropped. 
   */
  public ServerTransport setMaxIncomingMessageLength(long maxMessageLength) {
    return new ServerTransport(RCFProtoJNI.ServerTransport_setMaxIncomingMessageLength(swigCPtr, this, maxMessageLength), false);
  }

  /**
   * Returns maximum incoming message length. 
   */
  public long getMaxIncomingMessageLength() {
    return RCFProtoJNI.ServerTransport_getMaxIncomingMessageLength(swigCPtr, this);
  }

  /**
   * Sets the maximum number of simultaneous connections to the server transport. 
   */
  public ServerTransport setConnectionLimit(long connectionLimit) {
    return new ServerTransport(RCFProtoJNI.ServerTransport_setConnectionLimit(swigCPtr, this, connectionLimit), false);
  }

  /**
   * Returns the maximum number of simultaneous connections to the server transport. 
   */
  public long getConnectionLimit() {
    return RCFProtoJNI.ServerTransport_getConnectionLimit(swigCPtr, this);
  }

  /**
   * Sets the initial number of listening connections that are created when the server transport starts. 
   */
  public ServerTransport setInitialNumberOfConnections(long initialNumberOfConnections) {
    return new ServerTransport(RCFProtoJNI.ServerTransport_setInitialNumberOfConnections(swigCPtr, this, initialNumberOfConnections), false);
  }

  /**
   * Returns the initial number of listening connections that are created when the server transport starts. 
   */
  public long getInitialNumberOfConnections() {
    return RCFProtoJNI.ServerTransport_getInitialNumberOfConnections(swigCPtr, this);
  }

  /**
   * Sets the thread pool that the server transport will use. 
   */
  public ServerTransport setThreadPool(ThreadPool threadPoolPtr) {
    return new ServerTransport(RCFProtoJNI.ServerTransport_setThreadPool(swigCPtr, this, ThreadPool.getCPtr(threadPoolPtr), threadPoolPtr), false);
  }

  /**
   * Sets the list of supported protocols the server transport supports. Clients that connect without using one of the supported protocols are dropped. If the list of supported protocols is empty, all protocols are allowed. 
   */
  public ServerTransport setSupportedProtocols(TransportProtocolList protocols) {
    return new ServerTransport(RCFProtoJNI.ServerTransport_setSupportedProtocols(swigCPtr, this, TransportProtocolList.getCPtr(protocols), protocols), false);
  }

  public TransportProtocolList getSupportedProtocols() {
    return new TransportProtocolList(RCFProtoJNI.ServerTransport_getSupportedProtocols(swigCPtr, this), false);
  }

}
