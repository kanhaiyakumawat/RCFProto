/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.deltavsoft.rcfproto;

class RCFProtoJNI {
  public final static native long new_TransportProtocolList__SWIG_0();
  public final static native long new_TransportProtocolList__SWIG_1(long jarg1);
  public final static native long TransportProtocolList_size(long jarg1, TransportProtocolList jarg1_);
  public final static native long TransportProtocolList_capacity(long jarg1, TransportProtocolList jarg1_);
  public final static native void TransportProtocolList_reserve(long jarg1, TransportProtocolList jarg1_, long jarg2);
  public final static native boolean TransportProtocolList_isEmpty(long jarg1, TransportProtocolList jarg1_);
  public final static native void TransportProtocolList_clear(long jarg1, TransportProtocolList jarg1_);
  public final static native void TransportProtocolList_add(long jarg1, TransportProtocolList jarg1_, int jarg2);
  public final static native int TransportProtocolList_get(long jarg1, TransportProtocolList jarg1_, int jarg2);
  public final static native void TransportProtocolList_set(long jarg1, TransportProtocolList jarg1_, int jarg2, int jarg3);
  public final static native void delete_TransportProtocolList(long jarg1);
  public final static native void init();
  public final static native void deinit();
  public final static native boolean isProBuild();
  public final static native void delete_LogTarget(long jarg1);
  public final static native long new_LogToStdout();
  public final static native void delete_LogToStdout(long jarg1);
  public final static native long new_LogToDebugWindow();
  public final static native void delete_LogToDebugWindow(long jarg1);
  public final static native long new_LogToEventLog(String jarg1, int jarg2);
  public final static native void delete_LogToEventLog(long jarg1);
  public final static native long new_LogToFile(String jarg1, boolean jarg2);
  public final static native void delete_LogToFile(long jarg1);
  public final static native void enableLogging(long jarg1, LogTarget jarg1_, int jarg2, String jarg3);
  public final static native void disableLogging();
  public final static native int Certificate__getType(long jarg1, Certificate jarg1_);
  public final static native long Certificate__downcastToWin32Certificate(long jarg1, Certificate jarg1_, long jarg2, Certificate jarg2_);
  public final static native long Certificate__downcastToX509Certificate(long jarg1, Certificate jarg1_, long jarg2, Certificate jarg2_);
  public final static native void delete_Certificate(long jarg1);
  public final static native long new_PemCertificate__SWIG_0(String jarg1, String jarg2);
  public final static native long new_PemCertificate__SWIG_1(String jarg1);
  public final static native void delete_PemCertificate(long jarg1);
  public final static native int X509Certificate__getType(long jarg1, X509Certificate jarg1_);
  public final static native String X509Certificate_getCertificateName(long jarg1, X509Certificate jarg1_);
  public final static native String X509Certificate_getIssuerName(long jarg1, X509Certificate jarg1_);
  public final static native void delete_X509Certificate(long jarg1);
  public final static native int Win32Certificate__getType(long jarg1, Win32Certificate jarg1_);
  public final static native String Win32Certificate_getCertificateName(long jarg1, Win32Certificate jarg1_);
  public final static native String Win32Certificate_getIssuerName(long jarg1, Win32Certificate jarg1_);
  public final static native void Win32Certificate_exportToPfx(long jarg1, Win32Certificate jarg1_, String jarg2);
  public final static native long Win32Certificate_findRootCertificate(long jarg1, Win32Certificate jarg1_, int jarg2, int jarg3);
  public final static native void delete_Win32Certificate(long jarg1);
  public final static native long new_PfxCertificate(String jarg1, String jarg2, String jarg3);
  public final static native void PfxCertificate_addToStore(long jarg1, PfxCertificate jarg1_, int jarg2, int jarg3);
  public final static native void delete_PfxCertificate(long jarg1);
  public final static native long new_StoreCertificate(int jarg1, int jarg2, String jarg3);
  public final static native void StoreCertificate_removeFromStore(long jarg1, StoreCertificate jarg1_);
  public final static native void delete_StoreCertificate(long jarg1);
  public final static native long new_StoreCertificateIterator(int jarg1, int jarg2);
  public final static native boolean StoreCertificateIterator_moveNext(long jarg1, StoreCertificateIterator jarg1_);
  public final static native void StoreCertificateIterator_reset(long jarg1, StoreCertificateIterator jarg1_);
  public final static native long StoreCertificateIterator_current(long jarg1, StoreCertificateIterator jarg1_);
  public final static native void delete_StoreCertificateIterator(long jarg1);
  public final static native void setDefaultSslImplementation(int jarg1);
  public final static native int getDefaultSslImplementation();
  public final static native long new_IpAddress__SWIG_0(String jarg1);
  public final static native long new_IpAddress__SWIG_1(String jarg1, int jarg2);
  public final static native void delete_IpAddress(long jarg1);
  public final static native long new_ThreadPool__SWIG_0(long jarg1);
  public final static native long new_ThreadPool__SWIG_1(long jarg1, long jarg2);
  public final static native void ThreadPool_setThreadMinCount(long jarg1, ThreadPool jarg1_, long jarg2);
  public final static native long ThreadPool_getThreadMinCount(long jarg1, ThreadPool jarg1_);
  public final static native void ThreadPool_setThreadMaxCount(long jarg1, ThreadPool jarg1_, long jarg2);
  public final static native long ThreadPool_getThreadMaxCount(long jarg1, ThreadPool jarg1_);
  public final static native void ThreadPool_setThreadIdleTimeoutMs(long jarg1, ThreadPool jarg1_, long jarg2);
  public final static native long ThreadPool_getThreadIdleTimeoutMs(long jarg1, ThreadPool jarg1_);
  public final static native void ThreadPool_setReserveLastThread(long jarg1, ThreadPool jarg1_, boolean jarg2);
  public final static native boolean ThreadPool_getReserveLastThread(long jarg1, ThreadPool jarg1_);
  public final static native void ThreadPool_setThreadName(long jarg1, ThreadPool jarg1_, String jarg2);
  public final static native String ThreadPool_getThreadName(long jarg1, ThreadPool jarg1_);
  public final static native void delete_ThreadPool(long jarg1);
  public final static native void delete_Endpoint(long jarg1);
  public final static native long new_TcpEndpoint__SWIG_0(int jarg1);
  public final static native long new_TcpEndpoint__SWIG_1(String jarg1, int jarg2);
  public final static native String TcpEndpoint_getIp(long jarg1, TcpEndpoint jarg1_);
  public final static native int TcpEndpoint_getPort(long jarg1, TcpEndpoint jarg1_);
  public final static native String TcpEndpoint_asString(long jarg1, TcpEndpoint jarg1_);
  public final static native void delete_TcpEndpoint(long jarg1);
  public final static native long new_Win32NamedPipeEndpoint(String jarg1);
  public final static native void delete_Win32NamedPipeEndpoint(long jarg1);
  public final static native long new_UnixLocalEndpoint(String jarg1);
  public final static native void delete_UnixLocalEndpoint(long jarg1);
  public final static native long new_HttpEndpoint__SWIG_0(int jarg1);
  public final static native long new_HttpEndpoint__SWIG_1(String jarg1, int jarg2);
  public final static native void delete_HttpEndpoint(long jarg1);
  public final static native long new_HttpsEndpoint__SWIG_0(int jarg1);
  public final static native long new_HttpsEndpoint__SWIG_1(String jarg1, int jarg2);
  public final static native void delete_HttpsEndpoint(long jarg1);
  public final static native int ServerTransport_getTransportType(long jarg1, ServerTransport jarg1_);
  public final static native long ServerTransport_setMaxIncomingMessageLength(long jarg1, ServerTransport jarg1_, long jarg2);
  public final static native long ServerTransport_getMaxIncomingMessageLength(long jarg1, ServerTransport jarg1_);
  public final static native long ServerTransport_setConnectionLimit(long jarg1, ServerTransport jarg1_, long jarg2);
  public final static native long ServerTransport_getConnectionLimit(long jarg1, ServerTransport jarg1_);
  public final static native long ServerTransport_setInitialNumberOfConnections(long jarg1, ServerTransport jarg1_, long jarg2);
  public final static native long ServerTransport_getInitialNumberOfConnections(long jarg1, ServerTransport jarg1_);
  public final static native long ServerTransport_setThreadPool(long jarg1, ServerTransport jarg1_, long jarg2, ThreadPool jarg2_);
  public final static native long ServerTransport_setSupportedProtocols(long jarg1, ServerTransport jarg1_, long jarg2, TransportProtocolList jarg2_);
  public final static native long ServerTransport_getSupportedProtocols(long jarg1, ServerTransport jarg1_);
  public final static native void delete_ServerTransport(long jarg1);
  public final static native int ClientTransport_getTransportType(long jarg1, ClientTransport jarg1_);
  public final static native void ClientTransport_setMaxIncomingMessageLength(long jarg1, ClientTransport jarg1_, long jarg2);
  public final static native long ClientTransport_getMaxIncomingMessageLength(long jarg1, ClientTransport jarg1_);
  public final static native long ClientTransport_getLastRequestSize(long jarg1, ClientTransport jarg1_);
  public final static native long ClientTransport_getLastResponseSize(long jarg1, ClientTransport jarg1_);
  public final static native java.math.BigInteger ClientTransport_getRunningTotalBytesSent(long jarg1, ClientTransport jarg1_);
  public final static native java.math.BigInteger ClientTransport_getRunningTotalBytesReceived(long jarg1, ClientTransport jarg1_);
  public final static native void ClientTransport_resetRunningTotals(long jarg1, ClientTransport jarg1_);
  public final static native void delete_ClientTransport(long jarg1);
  public final static native void _SwigCallbackArgs_mErrorString_set(long jarg1, _SwigCallbackArgs jarg1_, String jarg2);
  public final static native String _SwigCallbackArgs_mErrorString_get(long jarg1, _SwigCallbackArgs jarg1_);
  public final static native void _SwigCallbackArgs_mCertificatePtr_set(long jarg1, _SwigCallbackArgs jarg1_, long jarg2, Certificate jarg2_);
  public final static native long _SwigCallbackArgs_mCertificatePtr_get(long jarg1, _SwigCallbackArgs jarg1_);
  public final static native long new__SwigCallbackArgs();
  public final static native void delete__SwigCallbackArgs(long jarg1);
  public final static native long new__SwigCallback();
  public final static native void delete__SwigCallback(long jarg1);
  public final static native void _SwigCallback_Run(long jarg1, _SwigCallback jarg1_);
  public final static native void _SwigCallback_RunSwigExplicit_SwigCallback(long jarg1, _SwigCallback jarg1_);
  public final static native void _SwigCallback_ProtoRpcBegin(long jarg1, _SwigCallback jarg1_, long jarg2, _SwigCallbackArgs jarg2_, long jarg3, RcfProtoServer jarg3_, long jarg4, RcfProtoSession jarg4_, String jarg5, int jarg6);
  public final static native void _SwigCallback_ProtoRpcBeginSwigExplicit_SwigCallback(long jarg1, _SwigCallback jarg1_, long jarg2, _SwigCallbackArgs jarg2_, long jarg3, RcfProtoServer jarg3_, long jarg4, RcfProtoSession jarg4_, String jarg5, int jarg6);
  public final static native boolean _SwigCallback_ValidateCertificate(long jarg1, _SwigCallback jarg1_, long jarg2, _SwigCallbackArgs jarg2_);
  public final static native boolean _SwigCallback_ValidateCertificateSwigExplicit_SwigCallback(long jarg1, _SwigCallback jarg1_, long jarg2, _SwigCallbackArgs jarg2_);
  public final static native void _SwigCallback_director_connect(_SwigCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void _SwigCallback_change_ownership(_SwigCallback obj, long cptr, boolean take_or_release);
  public final static native void RcfProtoChannel__CallMethodSwig(long jarg1, RcfProtoChannel jarg1_, String jarg2, int jarg3, byte[] jarg4, long jarg6, _SwigCallback jarg6_);
  public final static native int RcfProtoChannel__GetResponseBufferLength(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel__GetResponseBuffer(long jarg1, RcfProtoChannel jarg1_, byte[] jarg2);
  public final static native long new_RcfProtoChannel(long jarg1, Endpoint jarg1_);
  public final static native void RcfProtoChannel__CallMethodSwig_WithCopy(long jarg1, RcfProtoChannel jarg1_, String jarg2, int jarg3, String jarg4, long jarg5, _SwigCallback jarg5_);
  public final static native String RcfProtoChannel__GetResponseBuffer_WithCopy(long jarg1, RcfProtoChannel jarg1_);
  public final static native boolean RcfProtoChannel_Failed(long jarg1, RcfProtoChannel jarg1_);
  public final static native String RcfProtoChannel_ErrorText(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_StartCancel(long jarg1, RcfProtoChannel jarg1_);
  public final static native boolean RcfProtoChannel_Completed(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_connect(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_disconnect(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setRemoteCallTimeoutMs(long jarg1, RcfProtoChannel jarg1_, long jarg2);
  public final static native long RcfProtoChannel_getRemoteCallTimeoutMs(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setConnectTimeoutMs(long jarg1, RcfProtoChannel jarg1_, long jarg2);
  public final static native long RcfProtoChannel_getConnectTimeoutMs(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setTransportProtocol(long jarg1, RcfProtoChannel jarg1_, int jarg2);
  public final static native int RcfProtoChannel_getTransportProtocol(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setAsynchronousRpcMode(long jarg1, RcfProtoChannel jarg1_, boolean jarg2);
  public final static native boolean RcfProtoChannel_getAsynchronousRpcMode(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setPingBackIntervalMs(long jarg1, RcfProtoChannel jarg1_, int jarg2);
  public final static native int RcfProtoChannel_getPingBackIntervalMs(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setHttpProxy(long jarg1, RcfProtoChannel jarg1_, String jarg2);
  public final static native String RcfProtoChannel_getHttpProxy(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setHttpProxyPort(long jarg1, RcfProtoChannel jarg1_, int jarg2);
  public final static native int RcfProtoChannel_getHttpProxyPort(long jarg1, RcfProtoChannel jarg1_);
  public final static native int RcfProtoChannel_getTransportType(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setUsername(long jarg1, RcfProtoChannel jarg1_, String jarg2);
  public final static native String RcfProtoChannel_getUsername(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setPassword(long jarg1, RcfProtoChannel jarg1_, String jarg2);
  public final static native String RcfProtoChannel_getPassword(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setKerberosSpn(long jarg1, RcfProtoChannel jarg1_, String jarg2);
  public final static native String RcfProtoChannel_getKerberosSpn(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setEnableCompression(long jarg1, RcfProtoChannel jarg1_, boolean jarg2);
  public final static native boolean RcfProtoChannel_getEnableCompression(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setCertificate(long jarg1, RcfProtoChannel jarg1_, long jarg2, Certificate jarg2_);
  public final static native long RcfProtoChannel_getCertificate(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setCaCertificate(long jarg1, RcfProtoChannel jarg1_, long jarg2, Certificate jarg2_);
  public final static native long RcfProtoChannel_getCaCertificate(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setOpenSslCipherSuite(long jarg1, RcfProtoChannel jarg1_, String jarg2);
  public final static native String RcfProtoChannel_getOpenSslCipherSuite(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel_setEnableSchannelCertificateValidation(long jarg1, RcfProtoChannel jarg1_, String jarg2);
  public final static native String RcfProtoChannel_getEnableSchannelCertificateValidation(long jarg1, RcfProtoChannel jarg1_);
  public final static native void RcfProtoChannel__setCertificateValidationCallback(long jarg1, RcfProtoChannel jarg1_, long jarg2, _SwigCallback jarg2_);
  public final static native void RcfProtoChannel_setSslImplementation(long jarg1, RcfProtoChannel jarg1_, int jarg2);
  public final static native int RcfProtoChannel_getSslImplementation(long jarg1, RcfProtoChannel jarg1_);
  public final static native void delete_RcfProtoChannel(long jarg1);
  public final static native int RcfProtoSession__GetRequestBufferLength(long jarg1, RcfProtoSession jarg1_);
  public final static native void RcfProtoSession__GetRequestBuffer(long jarg1, RcfProtoSession jarg1_, byte[] jarg2);
  public final static native void RcfProtoSession__SetResponseBuffer(long jarg1, RcfProtoSession jarg1_, byte[] jarg2);
  public final static native void RcfProtoSession_SetFailed(long jarg1, RcfProtoSession jarg1_, String jarg2);
  public final static native boolean RcfProtoSession_IsCanceled(long jarg1, RcfProtoSession jarg1_);
  public final static native void RcfProtoSession__Commit__SWIG_0(long jarg1, RcfProtoSession jarg1_, String jarg2);
  public final static native void RcfProtoSession__Commit__SWIG_1(long jarg1, RcfProtoSession jarg1_);
  public final static native String RcfProtoSession__GetRequestBuffer_WithCopy(long jarg1, RcfProtoSession jarg1_);
  public final static native void RcfProtoSession__SetResponseBuffer_WithCopy(long jarg1, RcfProtoSession jarg1_, String jarg2);
  public final static native String RcfProtoSession_getClientUsername(long jarg1, RcfProtoSession jarg1_);
  public final static native int RcfProtoSession_getTransportProtocol(long jarg1, RcfProtoSession jarg1_);
  public final static native int RcfProtoSession_getTransportType(long jarg1, RcfProtoSession jarg1_);
  public final static native boolean RcfProtoSession_getEnableCompression(long jarg1, RcfProtoSession jarg1_);
  public final static native long RcfProtoSession_getConnectionDuration(long jarg1, RcfProtoSession jarg1_);
  public final static native long RcfProtoSession_getRemoteCallCount(long jarg1, RcfProtoSession jarg1_);
  public final static native java.math.BigInteger RcfProtoSession_getTotalBytesReceived(long jarg1, RcfProtoSession jarg1_);
  public final static native java.math.BigInteger RcfProtoSession_getTotalBytesSent(long jarg1, RcfProtoSession jarg1_);
  public final static native void delete_RcfProtoSession(long jarg1);
  public final static native long new_RcfProtoServer__SWIG_0();
  public final static native long new_RcfProtoServer__SWIG_1(long jarg1, Endpoint jarg1_);
  public final static native void delete_RcfProtoServer(long jarg1);
  public final static native void RcfProtoServer_start(long jarg1, RcfProtoServer jarg1_);
  public final static native void RcfProtoServer_stop(long jarg1, RcfProtoServer jarg1_);
  public final static native void RcfProtoServer__setCallbackTable(long jarg1, RcfProtoServer jarg1_, long jarg2, _SwigCallback jarg2_);
  public final static native void RcfProtoServer_setThreadPool(long jarg1, RcfProtoServer jarg1_, long jarg2, ThreadPool jarg2_);
  public final static native long RcfProtoServer_getThreadPool(long jarg1, RcfProtoServer jarg1_);
  public final static native long RcfProtoServer_addEndpoint(long jarg1, RcfProtoServer jarg1_, long jarg2, Endpoint jarg2_);
  public final static native void RcfProtoServer_setSupportedTransportProtocols(long jarg1, RcfProtoServer jarg1_, long jarg2, TransportProtocolList jarg2_);
  public final static native long RcfProtoServer_getSupportedTransportProtocols(long jarg1, RcfProtoServer jarg1_);
  public final static native void RcfProtoServer_setSessionTimeoutMs(long jarg1, RcfProtoServer jarg1_, long jarg2);
  public final static native long RcfProtoServer_getSessionTimeoutMs(long jarg1, RcfProtoServer jarg1_);
  public final static native void RcfProtoServer_setSessionHarvestingIntervalMs(long jarg1, RcfProtoServer jarg1_, long jarg2);
  public final static native long RcfProtoServer_getSessionHarvestingIntervalMs(long jarg1, RcfProtoServer jarg1_);
  public final static native void RcfProtoServer_setCertificate(long jarg1, RcfProtoServer jarg1_, long jarg2, Certificate jarg2_);
  public final static native long RcfProtoServer_getCertificate(long jarg1, RcfProtoServer jarg1_);
  public final static native void RcfProtoServer_setOpenSslCipherSuite(long jarg1, RcfProtoServer jarg1_, String jarg2);
  public final static native String RcfProtoServer_getOpenSslCipherSuite(long jarg1, RcfProtoServer jarg1_);
  public final static native void RcfProtoServer_setCaCertificate(long jarg1, RcfProtoServer jarg1_, long jarg2, Certificate jarg2_);
  public final static native long RcfProtoServer_getCaCertificate(long jarg1, RcfProtoServer jarg1_);
  public final static native void RcfProtoServer_setEnableSchannelCertificateValidation(long jarg1, RcfProtoServer jarg1_, String jarg2);
  public final static native String RcfProtoServer_getEnableSchannelCertificateValidation(long jarg1, RcfProtoServer jarg1_);
  public final static native void RcfProtoServer_setSslImplementation(long jarg1, RcfProtoServer jarg1_, int jarg2);
  public final static native int RcfProtoServer_getSslImplementation(long jarg1, RcfProtoServer jarg1_);
  public final static native long LogToStdout_SWIGUpcast(long jarg1);
  public final static native long LogToDebugWindow_SWIGUpcast(long jarg1);
  public final static native long LogToEventLog_SWIGUpcast(long jarg1);
  public final static native long LogToFile_SWIGUpcast(long jarg1);
  public final static native long PemCertificate_SWIGSmartPtrUpcast(long jarg1);
  public final static native long X509Certificate_SWIGSmartPtrUpcast(long jarg1);
  public final static native long Win32Certificate_SWIGSmartPtrUpcast(long jarg1);
  public final static native long PfxCertificate_SWIGSmartPtrUpcast(long jarg1);
  public final static native long StoreCertificate_SWIGSmartPtrUpcast(long jarg1);
  public final static native long TcpEndpoint_SWIGUpcast(long jarg1);
  public final static native long Win32NamedPipeEndpoint_SWIGUpcast(long jarg1);
  public final static native long UnixLocalEndpoint_SWIGUpcast(long jarg1);
  public final static native long HttpEndpoint_SWIGUpcast(long jarg1);
  public final static native long HttpsEndpoint_SWIGUpcast(long jarg1);

  public static void SwigDirector__SwigCallback_Run(_SwigCallback self) {
    self.Run();
  }
  public static void SwigDirector__SwigCallback_ProtoRpcBegin(_SwigCallback self, long args, long server, long context, String serviceName, int methodId) {
    self.ProtoRpcBegin((args == 0) ? null : new _SwigCallbackArgs(args, false), (server == 0) ? null : new RcfProtoServer(server, false), (context == 0) ? null : new RcfProtoSession(context, false), serviceName, methodId);
  }
  public static boolean SwigDirector__SwigCallback_ValidateCertificate(_SwigCallback self, long args) {
    return self.ValidateCertificate((args == 0) ? null : new _SwigCallbackArgs(args, false));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
