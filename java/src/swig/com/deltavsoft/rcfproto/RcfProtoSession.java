/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.deltavsoft.rcfproto;

/**
 * Represents the server-side session associated with a RPC connection. 
 */
public class RcfProtoSession {
  private long swigCPtr;
  boolean swigCMemOwn;

  RcfProtoSession(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  static long getCPtr(RcfProtoSession obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RCFProtoJNI.delete_RcfProtoSession(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  int _GetRequestBufferLength() {
    return RCFProtoJNI.RcfProtoSession__GetRequestBufferLength(swigCPtr, this);
  }

  void _GetRequestBuffer(byte[] szBuffer) {
    RCFProtoJNI.RcfProtoSession__GetRequestBuffer(swigCPtr, this, szBuffer);
  }

  void _SetResponseBuffer(byte[] szBuffer) {
    RCFProtoJNI.RcfProtoSession__SetResponseBuffer(swigCPtr, this, szBuffer);
  }

  /**
   * Causes Failed() to return true on the client side.  "reason" will be incorporated into the message returned by ErrorText().  If you find you need to return machine-readable information about failures, you should incorporate it into your response protocol buffer and should NOT call SetFailed(). 
   */
  public void setFailed(String reason) {
    RCFProtoJNI.RcfProtoSession_SetFailed(swigCPtr, this, reason);
  }

  /**
   * If true, indicates that the client canceled the RPC, so the server may as well give up on replying to it.  The server should still call the final "done" callback. 
   */
  public boolean isCanceled() {
    return RCFProtoJNI.RcfProtoSession_IsCanceled(swigCPtr, this);
  }

  void _Commit(String errorMsg) {
    RCFProtoJNI.RcfProtoSession__Commit__SWIG_0(swigCPtr, this, errorMsg);
  }

  void _Commit() {
    RCFProtoJNI.RcfProtoSession__Commit__SWIG_1(swigCPtr, this);
  }

  String _GetRequestBuffer_WithCopy() {
    return RCFProtoJNI.RcfProtoSession__GetRequestBuffer_WithCopy(swigCPtr, this);
  }

  void _SetResponseBuffer_WithCopy(String buffer) {
    RCFProtoJNI.RcfProtoSession__SetResponseBuffer_WithCopy(swigCPtr, this, buffer);
  }

  /**
   * Returns the Windows username of the client, if a NTLM or Kerberos transport protocol is being used. 
   */
  public String getClientUsername() {
    return RCFProtoJNI.RcfProtoSession_getClientUsername(swigCPtr, this);
  }

  /**
   * Returns the transport protocol in use on this server session. 
   */
  public TransportProtocol getTransportProtocol() {
    return TransportProtocol.swigToEnum(RCFProtoJNI.RcfProtoSession_getTransportProtocol(swigCPtr, this));
  }

  /**
   * Returns the transport type of this server session. 
   */
  public TransportType getTransportType() {
    return TransportType.swigToEnum(RCFProtoJNI.RcfProtoSession_getTransportType(swigCPtr, this));
  }

  /**
   * Returns true if compression is enabled for this server session, and false otherwise. Compression is enabled by the client. 
   */
  public boolean getEnableCompression() {
    return RCFProtoJNI.RcfProtoSession_getEnableCompression(swigCPtr, this);
  }

  /**
   * Returns the duration of the client connection, in milliseconds. 
   */
  public long getConnectionDuration() {
    return RCFProtoJNI.RcfProtoSession_getConnectionDuration(swigCPtr, this);
  }

  /**
   * Returns the number of remote calls executed on the server session so far. 
   */
  public long getRemoteCallCount() {
    return RCFProtoJNI.RcfProtoSession_getRemoteCallCount(swigCPtr, this);
  }

  /**
   * Returns the total number of bytes received by the server session so far. 
   */
  public java.math.BigInteger getTotalBytesReceived() {
    return RCFProtoJNI.RcfProtoSession_getTotalBytesReceived(swigCPtr, this);
  }

  /**
   * Returns the total number of bytes sent from the server session so far. 
   */
  public java.math.BigInteger getTotalBytesSent() {
    return RCFProtoJNI.RcfProtoSession_getTotalBytesSent(swigCPtr, this);
  }

}
