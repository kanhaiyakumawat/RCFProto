/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.deltavsoft.rcfproto;

/**
 * Describes the transport types used by a RCF connection. 
 */
public enum TransportType {
  /**
   * Unknown 
   */
  Unknown,
  /**
   * TCP transport 
   */
  Tcp,
  /**
   * UDP transport 
   */
  Udp,
  /**
   * Win32 named pipe transport 
   */
  Win32NamedPipe,
  /**
   * UNIX local domain socket transport 
   */
  UnixNamedPipe,
  /**
   * HTTP/TCP transport 
   */
  Http,
  /**
   * HTTPS/TCP transport 
   */
  Https;

  final int swigValue() {
    return swigValue;
  }

  static TransportType swigToEnum(int swigValue) {
    TransportType[] swigValues = TransportType.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (TransportType swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + TransportType.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private TransportType() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private TransportType(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private TransportType(TransportType swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

