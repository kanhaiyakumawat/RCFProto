/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace DeltaVSoft.RCFProto {

using System;
using System.Runtime.InteropServices;

/// <summary>
/// Represents a certificate in a Windows certificate store. 
/// </summary>
public class StoreCertificate : Win32Certificate {
  private HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal StoreCertificate(IntPtr cPtr, bool cMemoryOwn) : base(RCFProtoPINVOKE.StoreCertificate_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(StoreCertificate obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~StoreCertificate() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          RCFProtoPINVOKE.delete_StoreCertificate(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  /// <summary>
  /// Loads a certificate from a certificate store. 
  /// </summary>
  public StoreCertificate(Win32CertificateLocation certStoreLocation, Win32CertificateStore certStore, string certName) : this(RCFProtoPINVOKE.new_StoreCertificate((int)certStoreLocation, (int)certStore, certName), true) {
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Removes the certificate from the store it was loaded from. 
  /// </summary>
  public void RemoveFromStore() {
    RCFProtoPINVOKE.StoreCertificate_removeFromStore(swigCPtr);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
