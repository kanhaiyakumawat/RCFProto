/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace DeltaVSoft.RCFProto {

using System;
using System.Runtime.InteropServices;

/// <summary>
/// Represents an in-memory certificate, usually from a remote peer. Only applicable to OpenSSL. 
/// </summary>
public class X509Certificate : Certificate {
  private HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal X509Certificate(IntPtr cPtr, bool cMemoryOwn) : base(RCFProtoPINVOKE.X509Certificate_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(X509Certificate obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~X509Certificate() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          RCFProtoPINVOKE.delete_X509Certificate(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal override CertificateImplementationType _getType() {
    CertificateImplementationType ret = (CertificateImplementationType)RCFProtoPINVOKE.X509Certificate__getType(swigCPtr);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Gets the name of the certificate. 
  /// </summary>
  public string GetCertificateName() {
    string ret = RCFProtoPINVOKE.X509Certificate_getCertificateName(swigCPtr);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Gets the name of the issuer of the certificate. 
  /// </summary>
  public string GetIssuerName() {
    string ret = RCFProtoPINVOKE.X509Certificate_getIssuerName(swigCPtr);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
