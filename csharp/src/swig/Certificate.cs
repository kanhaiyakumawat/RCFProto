/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace DeltaVSoft.RCFProto {

using System;
using System.Runtime.InteropServices;

/// <summary>
/// Base class of all certificate classes. 
/// </summary>
public class Certificate : IDisposable {
  private HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Certificate(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Certificate obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Certificate() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          RCFProtoPINVOKE.delete_Certificate(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  internal virtual CertificateImplementationType _getType() {
    CertificateImplementationType ret = (CertificateImplementationType)RCFProtoPINVOKE.Certificate__getType(swigCPtr);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal Win32Certificate _downcastToWin32Certificate(Certificate certPtr) {
    IntPtr cPtr = RCFProtoPINVOKE.Certificate__downcastToWin32Certificate(swigCPtr, Certificate.getCPtr(certPtr));
    Win32Certificate ret = (cPtr == IntPtr.Zero) ? null : new Win32Certificate(cPtr, true);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal X509Certificate _downcastToX509Certificate(Certificate certPtr) {
    IntPtr cPtr = RCFProtoPINVOKE.Certificate__downcastToX509Certificate(swigCPtr, Certificate.getCPtr(certPtr));
    X509Certificate ret = (cPtr == IntPtr.Zero) ? null : new X509Certificate(cPtr, true);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
