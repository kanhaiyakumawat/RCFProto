/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace DeltaVSoft.RCFProto {

using System;
using System.Runtime.InteropServices;

/// <summary>
/// Represents a server-side thread pool. 
/// </summary>
public class ThreadPool : IDisposable {
  private HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ThreadPool(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ThreadPool obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ThreadPool() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          RCFProtoPINVOKE.delete_ThreadPool(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public ThreadPool(uint fixedThreadCount) : this(RCFProtoPINVOKE.new_ThreadPool__SWIG_0(fixedThreadCount), true) {
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ThreadPool(uint threadMinCount, uint threadMaxCount) : this(RCFProtoPINVOKE.new_ThreadPool__SWIG_1(threadMinCount, threadMaxCount), true) {
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Sets the minimum number of threads in the thread pool. 
  /// </summary>
  public void SetThreadMinCount(uint threadMinCount) {
    RCFProtoPINVOKE.ThreadPool_setThreadMinCount(swigCPtr, threadMinCount);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Returns the minimum number of threads in the thread pool. 
  /// </summary>
  public uint GetThreadMinCount() {
    uint ret = RCFProtoPINVOKE.ThreadPool_getThreadMinCount(swigCPtr);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Sets the maximum number of threads in the thread pool. 
  /// </summary>
  public void SetThreadMaxCount(uint threadMaxCount) {
    RCFProtoPINVOKE.ThreadPool_setThreadMaxCount(swigCPtr, threadMaxCount);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Returns the maximum number of threads in the thread pool. 
  /// </summary>
  public uint GetThreadMaxCount() {
    uint ret = RCFProtoPINVOKE.ThreadPool_getThreadMaxCount(swigCPtr);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Sets the thread idle timeout value, in milliseconds. After a thread has been idle for this time, it will be shut down, unless the thread count is already at the minimum value for the thread pool. 
  /// </summary>
  public void SetThreadIdleTimeoutMs(uint threadIdleTimeoutMs) {
    RCFProtoPINVOKE.ThreadPool_setThreadIdleTimeoutMs(swigCPtr, threadIdleTimeoutMs);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Returns the thread idle timeout value, in milliseconds. 
  /// </summary>
  public uint GetThreadIdleTimeoutMs() {
    uint ret = RCFProtoPINVOKE.ThreadPool_getThreadIdleTimeoutMs(swigCPtr);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// If this setting is true, clients will receive an error message right away, if all threads in the thread pool are busy. Otherwise, the client will wait for a thread in the thread pool to become free. 
  /// </summary>
  public void SetReserveLastThread(bool reserveLastThread) {
    RCFProtoPINVOKE.ThreadPool_setReserveLastThread(swigCPtr, reserveLastThread);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetReserveLastThread() {
    bool ret = RCFProtoPINVOKE.ThreadPool_getReserveLastThread(swigCPtr);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Sets the thread name of the thread pool threads, as visible in a debugger. 
  /// </summary>
  public void SetThreadName(string threadName) {
    RCFProtoPINVOKE.ThreadPool_setThreadName(swigCPtr, threadName);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Returns the thread name of the thread pool threads. 
  /// </summary>
  public string GetThreadName() {
    string ret = RCFProtoPINVOKE.ThreadPool_getThreadName(swigCPtr);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
