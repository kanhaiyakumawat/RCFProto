/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace DeltaVSoft.RCFProto {

using System;
using System.Runtime.InteropServices;

public class RCFProto {
    
  /// <summary>
  /// Allows the user to set a specific path for the RCFProto native DLL (RCFProto_NET_impl.dll). Normally when Init() is called, RCFProto loads the native DLL using default Windows loading logic. If this is insufficient for your application, you can use SetNativeDllPath() to pass in the full path to RCFProto_NET_impl.dll . SetNativeDllPath() must be called before Init().
  /// </summary>
  public static void SetNativeDllPath(string nativeDllPath)
  {
      Util.g_nativeDllPath = nativeDllPath;
  }
  /// <summary>
  /// Reference-counted initialization of RCF framework. May be called multiple times (see deinit()). 
  /// </summary>
  public static void Init() {
    Util.LoadRCFProtoNativeDll();
    RCFProtoPINVOKE.init();
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Reference-counted deinitialization of RCF framework. For actual deinitialization to take place, deinit() must be called as many times as init() has been called. 
  /// </summary>
  public static void Deinit() {
    RCFProtoPINVOKE.deinit();
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// 
  /// </summary>
  public static bool IsProBuild() {
    bool ret = RCFProtoPINVOKE.isProBuild();
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Configures logging for the RCF runtime. logTarget is where the log output will appear. loglevel is the detail level of the log, ranging from 0 (no logging), 1 (errors-only logging) to 4 (maximum detail logging). logFormat is an optional parameter describing the format of the log output. 
  /// </summary>
  public static void EnableLogging(LogTarget logTarget, int logLevel, string logFormat) {
    RCFProtoPINVOKE.enableLogging(LogTarget.getCPtr(logTarget), logLevel, logFormat);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Disables logging for the RCF runtime. 
  /// </summary>
  public static void DisableLogging() {
    RCFProtoPINVOKE.disableLogging();
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Sets the default SSL implementation to use (OpenSSL or Schannel). The default is OpenSSL. 
  /// </summary>
  public static void SetDefaultSslImplementation(SslImplementation sslImplementation) {
    RCFProtoPINVOKE.setDefaultSslImplementation((int)sslImplementation);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Gets the default SSL implementation. 
  /// </summary>
  public static SslImplementation GetDefaultSslImplementation() {
    SslImplementation ret = (SslImplementation)RCFProtoPINVOKE.getDefaultSslImplementation();
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
