/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace DeltaVSoft.RCFProto {

using System;
using System.Runtime.InteropServices;

internal class _SwigCallback : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal _SwigCallback(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(_SwigCallback obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~_SwigCallback() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RCFProtoPINVOKE.delete__SwigCallback(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public _SwigCallback() : this(RCFProtoPINVOKE.new__SwigCallback(), true) {
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual void Run() {
    if (SwigDerivedClassHasMethod("Run", swigMethodTypes0)) RCFProtoPINVOKE._SwigCallback_RunSwigExplicit_SwigCallback(swigCPtr); else RCFProtoPINVOKE._SwigCallback_Run(swigCPtr);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ProtoRpcBegin(_SwigCallbackArgs args, RcfProtoServer server, RcfProtoSession context, string serviceName, int methodId) {
    if (SwigDerivedClassHasMethod("ProtoRpcBegin", swigMethodTypes1)) RCFProtoPINVOKE._SwigCallback_ProtoRpcBeginSwigExplicit_SwigCallback(swigCPtr, _SwigCallbackArgs.getCPtr(args), RcfProtoServer.getCPtr(server), RcfProtoSession.getCPtr(context), serviceName, methodId); else RCFProtoPINVOKE._SwigCallback_ProtoRpcBegin(swigCPtr, _SwigCallbackArgs.getCPtr(args), RcfProtoServer.getCPtr(server), RcfProtoSession.getCPtr(context), serviceName, methodId);
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool ValidateCertificate(_SwigCallbackArgs args) {
    bool ret = (SwigDerivedClassHasMethod("ValidateCertificate", swigMethodTypes2) ? RCFProtoPINVOKE._SwigCallback_ValidateCertificateSwigExplicit_SwigCallback(swigCPtr, _SwigCallbackArgs.getCPtr(args)) : RCFProtoPINVOKE._SwigCallback_ValidateCertificate(swigCPtr, _SwigCallbackArgs.getCPtr(args)));
    if (RCFProtoPINVOKE.SWIGPendingException.Pending) throw RCFProtoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Run", swigMethodTypes0))
      swigDelegate0 = new SwigDelegate_SwigCallback_0(SwigDirectorRun);
    if (SwigDerivedClassHasMethod("ProtoRpcBegin", swigMethodTypes1))
      swigDelegate1 = new SwigDelegate_SwigCallback_1(SwigDirectorProtoRpcBegin);
    if (SwigDerivedClassHasMethod("ValidateCertificate", swigMethodTypes2))
      swigDelegate2 = new SwigDelegate_SwigCallback_2(SwigDirectorValidateCertificate);
    RCFProtoPINVOKE._SwigCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(_SwigCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectorRun() {
    Run();
  }

  private void SwigDirectorProtoRpcBegin(IntPtr args, IntPtr server, IntPtr context, string serviceName, int methodId) {
    ProtoRpcBegin((args == IntPtr.Zero) ? null : new _SwigCallbackArgs(args, false), (server == IntPtr.Zero) ? null : new RcfProtoServer(server, false), (context == IntPtr.Zero) ? null : new RcfProtoSession(context, false), serviceName, methodId);
  }

  private bool SwigDirectorValidateCertificate(IntPtr args) {
    return ValidateCertificate((args == IntPtr.Zero) ? null : new _SwigCallbackArgs(args, false));
  }

  public delegate void SwigDelegate_SwigCallback_0();
  public delegate void SwigDelegate_SwigCallback_1(IntPtr args, IntPtr server, IntPtr context, string serviceName, int methodId);
  public delegate bool SwigDelegate_SwigCallback_2(IntPtr args);

  private SwigDelegate_SwigCallback_0 swigDelegate0;
  private SwigDelegate_SwigCallback_1 swigDelegate1;
  private SwigDelegate_SwigCallback_2 swigDelegate2;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(_SwigCallbackArgs), typeof(RcfProtoServer), typeof(RcfProtoSession), typeof(string), typeof(int) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(_SwigCallbackArgs) };
}

}
